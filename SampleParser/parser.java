
//----------------------------------------------------
// The following code was generated by CUP v0.11b 20160615 (GIT 4ac7450)
//----------------------------------------------------

import java_cup.runtime.*;
import absyn.*;
import java_cup.runtime.XMLElement;

/** CUP v0.11b 20160615 (GIT 4ac7450) generated parser.
  */
@SuppressWarnings({"rawtypes"})
public class parser extends java_cup.runtime.lr_parser {

 public final Class getSymbolContainer() {
    return sym.class;
}

  /** Default constructor. */
  @Deprecated
  public parser() {super();}

  /** Constructor which sets the default scanner. */
  @Deprecated
  public parser(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public parser(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\103\000\002\002\004\000\002\002\003\000\002\003" +
    "\004\000\002\003\003\000\002\004\003\000\002\004\003" +
    "\000\002\005\005\000\002\005\010\000\002\006\010\000" +
    "\002\007\003\000\002\007\003\000\002\007\003\000\002" +
    "\010\003\000\002\010\003\000\002\011\005\000\002\011" +
    "\003\000\002\012\004\000\002\012\006\000\002\013\006" +
    "\000\002\014\004\000\002\014\002\000\002\015\004\000" +
    "\002\015\002\000\002\016\003\000\002\016\003\000\002" +
    "\016\003\000\002\016\003\000\002\016\003\000\002\017" +
    "\004\000\002\017\003\000\002\020\007\000\002\020\011" +
    "\000\002\021\007\000\002\022\004\000\002\022\005\000" +
    "\002\023\005\000\002\023\003\000\002\024\003\000\002" +
    "\024\006\000\002\025\005\000\002\025\003\000\002\026" +
    "\003\000\002\026\003\000\002\026\003\000\002\026\003" +
    "\000\002\026\003\000\002\026\003\000\002\027\005\000" +
    "\002\027\003\000\002\030\003\000\002\030\003\000\002" +
    "\031\005\000\002\031\003\000\002\032\003\000\002\032" +
    "\003\000\002\033\004\000\002\033\003\000\002\034\005" +
    "\000\002\034\003\000\002\034\003\000\002\034\003\000" +
    "\002\034\003\000\002\035\006\000\002\036\003\000\002" +
    "\036\002\000\002\037\005\000\002\037\003" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\153\000\010\004\005\007\004\011\007\001\002\000" +
    "\004\044\ufff7\001\002\000\004\044\ufff8\001\002\000\012" +
    "\002\ufffe\004\ufffe\007\ufffe\011\ufffe\001\002\000\004\044" +
    "\ufff6\001\002\000\004\002\155\001\002\000\012\002\000" +
    "\004\005\007\004\011\007\001\002\000\012\002\ufffc\004" +
    "\ufffc\007\ufffc\011\ufffc\001\002\000\004\044\015\001\002" +
    "\000\012\002\ufffd\004\ufffd\007\ufffd\011\ufffd\001\002\000" +
    "\010\032\017\034\020\036\016\001\002\000\004\045\151" +
    "\001\002\000\040\002\ufffb\004\ufffb\005\ufffb\007\ufffb\010" +
    "\ufffb\011\ufffb\012\ufffb\015\ufffb\032\ufffb\034\ufffb\040\ufffb" +
    "\041\ufffb\043\ufffb\044\ufffb\045\ufffb\001\002\000\010\004" +
    "\005\007\004\011\023\001\002\000\006\033\147\035\ufff5" +
    "\001\002\000\006\033\ufff2\035\ufff2\001\002\000\006\035" +
    "\ufff4\044\ufff6\001\002\000\004\044\144\001\002\000\004" +
    "\035\026\001\002\000\004\040\030\001\002\000\012\002" +
    "\ufff9\004\ufff9\007\ufff9\011\ufff9\001\002\000\036\004\uffed" +
    "\005\uffed\007\uffed\010\uffed\011\uffed\012\uffed\015\uffed\032" +
    "\uffed\034\uffed\040\uffed\041\uffed\043\uffed\044\uffed\045\uffed" +
    "\001\002\000\036\004\005\005\uffeb\007\004\010\uffeb\011" +
    "\007\012\uffeb\015\uffeb\032\uffeb\034\uffeb\040\uffeb\041\uffeb" +
    "\043\uffeb\044\uffeb\045\uffeb\001\002\000\030\005\044\010" +
    "\042\012\040\015\060\032\047\034\045\040\030\041\041" +
    "\043\037\044\046\045\050\001\002\000\036\004\uffee\005" +
    "\uffee\007\uffee\010\uffee\011\uffee\012\uffee\015\uffee\032\uffee" +
    "\034\uffee\040\uffee\041\uffee\043\uffee\044\uffee\045\uffee\001" +
    "\002\000\004\044\035\001\002\000\006\032\017\036\016" +
    "\001\002\000\030\005\uffec\010\uffec\012\uffec\015\uffec\032" +
    "\uffec\034\uffec\040\uffec\041\uffec\043\uffec\044\uffec\045\uffec" +
    "\001\002\000\036\014\uffc4\015\uffc4\016\uffc4\017\uffc4\020" +
    "\uffc4\021\uffc4\022\uffc4\023\uffc4\024\uffc4\025\uffc4\032\uffc4" +
    "\033\uffc4\035\uffc4\037\uffc4\001\002\000\004\034\140\001" +
    "\002\000\042\002\uffef\004\uffef\005\uffef\006\uffef\007\uffef" +
    "\010\uffef\011\uffef\012\uffef\015\uffef\032\uffef\034\uffef\040" +
    "\uffef\041\uffef\043\uffef\044\uffef\045\uffef\001\002\000\016" +
    "\015\060\032\136\034\045\043\037\044\046\045\050\001" +
    "\002\000\032\005\uffe9\006\uffe9\010\uffe9\012\uffe9\015\uffe9" +
    "\032\uffe9\034\uffe9\040\uffe9\041\uffe9\043\uffe9\044\uffe9\045" +
    "\uffe9\001\002\000\004\034\127\001\002\000\014\015\060" +
    "\034\045\043\037\044\046\045\050\001\002\000\044\014" +
    "\uffdc\015\uffdc\016\uffdc\017\uffdc\020\uffdc\021\uffdc\022\uffdc" +
    "\023\uffdc\024\uffdc\025\uffdc\031\uffdc\032\uffdc\033\uffdc\034" +
    "\114\035\uffdc\036\113\037\uffdc\001\002\000\032\005\uffe4" +
    "\006\uffe4\010\uffe4\012\uffe4\015\uffe4\032\uffe4\034\uffe4\040" +
    "\uffe4\041\uffe4\043\uffe4\044\uffe4\045\uffe4\001\002\000\036" +
    "\014\uffc5\015\uffc5\016\uffc5\017\uffc5\020\uffc5\021\uffc5\022" +
    "\uffc5\023\uffc5\024\uffc5\025\uffc5\032\uffc5\033\uffc5\035\uffc5" +
    "\037\uffc5\001\002\000\032\005\uffe6\006\uffe6\010\uffe6\012" +
    "\uffe6\015\uffe6\032\uffe6\034\uffe6\040\uffe6\041\uffe6\043\uffe6" +
    "\044\uffe6\045\uffe6\001\002\000\004\032\112\001\002\000" +
    "\036\014\uffc9\015\uffc9\016\uffc9\017\uffc9\020\uffc9\021\uffc9" +
    "\022\uffc9\023\uffc9\024\uffc9\025\uffc9\032\uffc9\033\uffc9\035" +
    "\uffc9\037\uffc9\001\002\000\032\014\102\015\076\020\107" +
    "\021\104\022\100\023\077\024\103\025\101\032\uffd9\033" +
    "\uffd9\035\uffd9\037\uffd9\001\002\000\036\014\uffd1\015\uffd1" +
    "\016\074\017\073\020\uffd1\021\uffd1\022\uffd1\023\uffd1\024" +
    "\uffd1\025\uffd1\032\uffd1\033\uffd1\035\uffd1\037\uffd1\001\002" +
    "\000\012\032\uffdd\033\uffdd\035\uffdd\037\uffdd\001\002\000" +
    "\032\005\uffea\006\uffea\010\uffea\012\uffea\015\uffea\032\uffea" +
    "\034\uffea\040\uffea\041\uffea\043\uffea\044\uffea\045\uffea\001" +
    "\002\000\014\015\060\034\045\043\037\044\046\045\050" +
    "\001\002\000\032\005\uffe8\006\uffe8\010\uffe8\012\uffe8\015" +
    "\uffe8\032\uffe8\034\uffe8\040\uffe8\041\uffe8\043\uffe8\044\uffe8" +
    "\045\uffe8\001\002\000\036\014\uffcd\015\uffcd\016\uffcd\017" +
    "\uffcd\020\uffcd\021\uffcd\022\uffcd\023\uffcd\024\uffcd\025\uffcd" +
    "\032\uffcd\033\uffcd\035\uffcd\037\uffcd\001\002\000\032\005" +
    "\uffe7\006\uffe7\010\uffe7\012\uffe7\015\uffe7\032\uffe7\034\uffe7" +
    "\040\uffe7\041\uffe7\043\uffe7\044\uffe7\045\uffe7\001\002\000" +
    "\036\014\uffc6\015\uffc6\016\uffc6\017\uffc6\020\uffc6\021\uffc6" +
    "\022\uffc6\023\uffc6\024\uffc6\025\uffc6\032\uffc6\033\uffc6\035" +
    "\uffc6\037\uffc6\001\002\000\040\014\uffc7\015\uffc7\016\uffc7" +
    "\017\uffc7\020\uffc7\021\uffc7\022\uffc7\023\uffc7\024\uffc7\025" +
    "\uffc7\031\066\032\uffc7\033\uffc7\035\uffc7\037\uffc7\001\002" +
    "\000\014\015\060\034\045\043\037\044\046\045\050\001" +
    "\002\000\012\032\uffde\033\uffde\035\uffde\037\uffde\001\002" +
    "\000\036\014\uffca\015\uffca\016\uffca\017\uffca\020\uffca\021" +
    "\uffca\022\uffca\023\uffca\024\uffca\025\uffca\032\uffca\033\uffca" +
    "\035\uffca\037\uffca\001\002\000\036\014\uffc7\015\uffc7\016" +
    "\uffc7\017\uffc7\020\uffc7\021\uffc7\022\uffc7\023\uffc7\024\uffc7" +
    "\025\uffc7\032\uffc7\033\uffc7\035\uffc7\037\uffc7\001\002\000" +
    "\014\015\060\034\045\043\037\044\046\045\050\001\002" +
    "\000\014\015\uffcb\034\uffcb\043\uffcb\044\uffcb\045\uffcb\001" +
    "\002\000\014\015\uffcc\034\uffcc\043\uffcc\044\uffcc\045\uffcc" +
    "\001\002\000\036\014\uffce\015\uffce\016\uffce\017\uffce\020" +
    "\uffce\021\uffce\022\uffce\023\uffce\024\uffce\025\uffce\032\uffce" +
    "\033\uffce\035\uffce\037\uffce\001\002\000\014\015\uffcf\034" +
    "\uffcf\043\uffcf\044\uffcf\045\uffcf\001\002\000\014\015\uffd5" +
    "\034\uffd5\043\uffd5\044\uffd5\045\uffd5\001\002\000\014\015" +
    "\uffd7\034\uffd7\043\uffd7\044\uffd7\045\uffd7\001\002\000\014" +
    "\015\uffd3\034\uffd3\043\uffd3\044\uffd3\045\uffd3\001\002\000" +
    "\014\015\uffd0\034\uffd0\043\uffd0\044\uffd0\045\uffd0\001\002" +
    "\000\014\015\uffd4\034\uffd4\043\uffd4\044\uffd4\045\uffd4\001" +
    "\002\000\014\015\uffd6\034\uffd6\043\uffd6\044\uffd6\045\uffd6" +
    "\001\002\000\014\015\060\034\045\043\037\044\046\045" +
    "\050\001\002\000\014\015\060\034\045\043\037\044\046" +
    "\045\050\001\002\000\014\015\uffd8\034\uffd8\043\uffd8\044" +
    "\uffd8\045\uffd8\001\002\000\036\014\uffd2\015\uffd2\016\074" +
    "\017\073\020\uffd2\021\uffd2\022\uffd2\023\uffd2\024\uffd2\025" +
    "\uffd2\032\uffd2\033\uffd2\035\uffd2\037\uffd2\001\002\000\016" +
    "\014\102\015\076\032\uffda\033\uffda\035\uffda\037\uffda\001" +
    "\002\000\032\005\uffe5\006\uffe5\010\uffe5\012\uffe5\015\uffe5" +
    "\032\uffe5\034\uffe5\040\uffe5\041\uffe5\043\uffe5\044\uffe5\045" +
    "\uffe5\001\002\000\014\015\060\034\045\043\037\044\046" +
    "\045\050\001\002\000\016\015\060\034\045\035\uffc1\043" +
    "\037\044\046\045\050\001\002\000\006\033\121\035\uffc2" +
    "\001\002\000\006\033\uffbf\035\uffbf\001\002\000\004\035" +
    "\120\001\002\000\036\014\uffc3\015\uffc3\016\uffc3\017\uffc3" +
    "\020\uffc3\021\uffc3\022\uffc3\023\uffc3\024\uffc3\025\uffc3\032" +
    "\uffc3\033\uffc3\035\uffc3\037\uffc3\001\002\000\014\015\060" +
    "\034\045\043\037\044\046\045\050\001\002\000\006\033" +
    "\uffc0\035\uffc0\001\002\000\004\037\124\001\002\000\040" +
    "\014\uffdb\015\uffdb\016\uffdb\017\uffdb\020\uffdb\021\uffdb\022" +
    "\uffdb\023\uffdb\024\uffdb\025\uffdb\031\uffdb\032\uffdb\033\uffdb" +
    "\035\uffdb\037\uffdb\001\002\000\004\035\126\001\002\000" +
    "\036\014\uffc8\015\uffc8\016\uffc8\017\uffc8\020\uffc8\021\uffc8" +
    "\022\uffc8\023\uffc8\024\uffc8\025\uffc8\032\uffc8\033\uffc8\035" +
    "\uffc8\037\uffc8\001\002\000\014\015\060\034\045\043\037" +
    "\044\046\045\050\001\002\000\004\035\131\001\002\000" +
    "\026\005\044\010\042\012\040\015\060\032\047\034\045" +
    "\040\030\043\037\044\046\045\050\001\002\000\032\005" +
    "\uffe3\006\133\010\uffe3\012\uffe3\015\uffe3\032\uffe3\034\uffe3" +
    "\040\uffe3\041\uffe3\043\uffe3\044\uffe3\045\uffe3\001\002\000" +
    "\026\005\044\010\042\012\040\015\060\032\047\034\045" +
    "\040\030\043\037\044\046\045\050\001\002\000\032\005" +
    "\uffe2\006\uffe2\010\uffe2\012\uffe2\015\uffe2\032\uffe2\034\uffe2" +
    "\040\uffe2\041\uffe2\043\uffe2\044\uffe2\045\uffe2\001\002\000" +
    "\004\032\137\001\002\000\032\005\uffe0\006\uffe0\010\uffe0" +
    "\012\uffe0\015\uffe0\032\uffe0\034\uffe0\040\uffe0\041\uffe0\043" +
    "\uffe0\044\uffe0\045\uffe0\001\002\000\032\005\uffdf\006\uffdf" +
    "\010\uffdf\012\uffdf\015\uffdf\032\uffdf\034\uffdf\040\uffdf\041" +
    "\uffdf\043\uffdf\044\uffdf\045\uffdf\001\002\000\014\015\060" +
    "\034\045\043\037\044\046\045\050\001\002\000\004\035" +
    "\142\001\002\000\026\005\044\010\042\012\040\015\060" +
    "\032\047\034\045\040\030\043\037\044\046\045\050\001" +
    "\002\000\032\005\uffe1\006\uffe1\010\uffe1\012\uffe1\015\uffe1" +
    "\032\uffe1\034\uffe1\040\uffe1\041\uffe1\043\uffe1\044\uffe1\045" +
    "\uffe1\001\002\000\010\033\ufff1\035\ufff1\036\145\001\002" +
    "\000\004\037\146\001\002\000\006\033\ufff0\035\ufff0\001" +
    "\002\000\010\004\005\007\004\011\007\001\002\000\006" +
    "\033\ufff3\035\ufff3\001\002\000\004\037\152\001\002\000" +
    "\004\032\153\001\002\000\040\002\ufffa\004\ufffa\005\ufffa" +
    "\007\ufffa\010\ufffa\011\ufffa\012\ufffa\015\ufffa\032\ufffa\034" +
    "\ufffa\040\ufffa\041\ufffa\043\ufffa\044\ufffa\045\ufffa\001\002" +
    "\000\012\002\uffff\004\uffff\007\uffff\011\uffff\001\002\000" +
    "\004\002\001\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\153\000\016\002\007\003\010\004\005\005\013\006" +
    "\011\007\012\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\012\004\153\005\013\006\011\007\012\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\012\007\023" +
    "\010\024\011\020\012\021\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\013\026\001\001\000\002\001\001\000" +
    "\004\014\030\001\001\000\010\005\032\007\033\015\031" +
    "\001\001\000\036\013\042\016\035\017\056\020\060\021" +
    "\062\022\050\023\051\024\064\025\055\027\053\031\054" +
    "\033\061\034\052\035\063\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\022\023" +
    "\134\024\064\025\055\027\053\031\054\033\061\034\052" +
    "\035\063\001\001\000\002\001\001\000\002\001\001\000" +
    "\022\023\124\024\064\025\055\027\053\031\054\033\061" +
    "\034\052\035\063\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\006\026\104\030\105\001\001\000" +
    "\004\032\071\001\001\000\002\001\001\000\002\001\001" +
    "\000\012\024\070\033\067\034\052\035\063\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\022\023\066\024\064\025" +
    "\055\027\053\031\054\033\061\034\052\035\063\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\012\024\070\033\074\034\052\035\063\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\016\024\070\027\110\031\054\033\061\034\052\035\063" +
    "\001\001\000\014\024\070\031\107\033\061\034\052\035" +
    "\063\001\001\000\002\001\001\000\004\032\071\001\001" +
    "\000\004\030\105\001\001\000\002\001\001\000\022\023" +
    "\122\024\064\025\055\027\053\031\054\033\061\034\052" +
    "\035\063\001\001\000\026\023\115\024\064\025\055\027" +
    "\053\031\054\033\061\034\052\035\063\036\116\037\114" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\022\023\121\024\064\025\055" +
    "\027\053\031\054\033\061\034\052\035\063\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\022\023\127\024\064\025" +
    "\055\027\053\031\054\033\061\034\052\035\063\001\001" +
    "\000\002\001\001\000\036\013\042\016\131\017\056\020" +
    "\060\021\062\022\050\023\051\024\064\025\055\027\053" +
    "\031\054\033\061\034\052\035\063\001\001\000\002\001" +
    "\001\000\036\013\042\016\133\017\056\020\060\021\062" +
    "\022\050\023\051\024\064\025\055\027\053\031\054\033" +
    "\061\034\052\035\063\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\022\023" +
    "\140\024\064\025\055\027\053\031\054\033\061\034\052" +
    "\035\063\001\001\000\002\001\001\000\036\013\042\016" +
    "\142\017\056\020\060\021\062\022\050\023\051\024\064" +
    "\025\055\027\053\031\054\033\061\034\052\035\063\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\006\007\023\012\147\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$parser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$parser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$parser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}



    
    /* Change the method report_error so it will display the line and
       column of where the error occurred in the input as well as the
       reason for the error which is passed into the method in the
       String 'message'. */
    public void report_error(String message, Object info) {
   
        /* Create a StringBuffer called 'm' with the string 'Error' in it. */
        StringBuffer m = new StringBuffer("Error");
   
        /* Check if the information passed to the method is the same
           type as the type java_cup.runtime.Symbol. */
        if (info instanceof java_cup.runtime.Symbol) {
            /* Declare a java_cup.runtime.Symbol object 's' with the
               information in the object info that is being typecasted
               as a java_cup.runtime.Symbol object. */
            java_cup.runtime.Symbol s = ((java_cup.runtime.Symbol) info);
   
            /* Check if the line number in the input is greater or
               equal to zero. */
            if (s.left >= 0) {                
                /* Add to the end of the StringBuffer error message
                   the line number of the error in the input. */
                m.append(" in line "+(s.left+1));   
                /* Check if the column number in the input is greater
                   or equal to zero. */
                if (s.right >= 0)                    
                    /* Add to the end of the StringBuffer error message
                       the column number of the error in the input. */
                    m.append(", column "+(s.right+1));
            }
        }
   
        /* Add to the end of the StringBuffer error message created in
           this method the message that was passed into this method. */
        m.append(" : "+message);
   
        /* Print the contents of the StringBuffer 'm', which contains
           an error message, out on a line. */
        System.err.println(m);
    }
   
    /* Change the method report_fatal_error so when it reports a fatal
       error it will display the line and column number of where the
       fatal error occurred in the input as well as the reason for the
       fatal error which is passed into the method in the object
       'message' and then exit.*/
    public void report_fatal_error(String message, Object info) {
        report_error(message, info);
        System.exit(1);
    }

    /* Assume true at the start, but set to false with parsing errors */
    public static boolean valid = true;



/** Cup generated class to encapsulate user supplied action code.*/
@SuppressWarnings({"rawtypes", "unchecked", "unused"})
class CUP$parser$actions {
  private final parser parser;

  /** Constructor */
  CUP$parser$actions(parser parser) {
    this.parser = parser;
  }

  /** Method 0 with the actual generated action code for actions 0 to 300. */
  public final java_cup.runtime.Symbol CUP$parser$do_action_part00000000(
    int                        CUP$parser$act_num,
    java_cup.runtime.lr_parser CUP$parser$parser,
    java.util.Stack            CUP$parser$stack,
    int                        CUP$parser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$parser$result;

      /* select the action based on the action number */
      switch (CUP$parser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= program EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		RESULT = start_val;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$parser$parser.done_parsing();
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // program ::= declaration_list 
            {
              Object RESULT =null;
		 
             System.out.println("DEBUG [program]: Entered PROGRAM"); 
          
              CUP$parser$result = parser.getSymbolFactory().newSymbol("program",0, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // declaration_list ::= declaration_list declaration 
            {
              Object RESULT =null;
		 
                      System.out.println("DEBUG [declaration_list]: Adding declaration: " + 
                        ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).value); 
                   
              CUP$parser$result = parser.getSymbolFactory().newSymbol("declaration_list",1, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // declaration_list ::= declaration 
            {
              Object RESULT =null;
		 
                      System.out.println("DEBUG [declaration_list]: Single declaration processed: " + 
                        ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).value); 
                   
              CUP$parser$result = parser.getSymbolFactory().newSymbol("declaration_list",1, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // declaration ::= var_declaration 
            {
              Object RESULT =null;
		 
                 System.out.println("DEBUG [declaration]: Parsed var_declaration: " + 
                   ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).value); 
              
              CUP$parser$result = parser.getSymbolFactory().newSymbol("declaration",2, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // declaration ::= fun_declaration 
            {
              Object RESULT =null;
		 
                 System.out.println("DEBUG [declaration]: Parsed fun_declaration: " + 
                   ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).value); 
              
              CUP$parser$result = parser.getSymbolFactory().newSymbol("declaration",2, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // var_declaration ::= type_specifier ID SCOLON 
            {
              Object RESULT =null;
		 
                     System.out.println("DEBUG [var_declaration]: Variable declaration: " + 
                       ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).value); 
                  
              CUP$parser$result = parser.getSymbolFactory().newSymbol("var_declaration",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // var_declaration ::= type_specifier ID LSQUARE NUM RSQUARE SCOLON 
            {
              Object RESULT =null;
		 
                     System.out.println("DEBUG [var_declaration]: Array declaration: " + 
                     ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).value + 
                     "[" + ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).value + "]"); 
                  
              CUP$parser$result = parser.getSymbolFactory().newSymbol("var_declaration",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // fun_declaration ::= type_specifier ID LPAREN params RPAREN compound_stmt 
            {
              Object RESULT =null;
		 
                     System.out.println("DEBUG [fun_declaration]: Function declared: " + 
                       ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).value); 
                  
              CUP$parser$result = parser.getSymbolFactory().newSymbol("fun_declaration",4, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // type_specifier ::= BOOL 
            {
              Object RESULT =null;
		 System.out.println("DEBUG [type_specifier]: Type BOOL"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("type_specifier",5, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // type_specifier ::= INT 
            {
              Object RESULT =null;
		 System.out.println("DEBUG [type_specifier]: Type INT"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("type_specifier",5, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // type_specifier ::= VOID 
            {
              Object RESULT =null;
		 System.out.println("DEBUG [type_specifier]: Type VOID"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("type_specifier",5, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // params ::= param_list 
            {
              Object RESULT =null;
		 System.out.println("DEBUG [params]: Parsed parameters: " + 
           ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).value); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("params",6, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // params ::= VOID 
            {
              Object RESULT =null;
		 System.out.println("DEBUG [params]: Void parameter list"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("params",6, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // param_list ::= param_list COMMA param 
            {
              Object RESULT =null;
		 System.out.println("DEBUG [param_list]: Multiple parameters: " + 
               ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).value); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("param_list",7, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // param_list ::= param 
            {
              Object RESULT =null;
		 System.out.println("DEBUG [param_list]: Single parameter: " + 
               ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).value); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("param_list",7, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // param ::= type_specifier ID 
            {
              Object RESULT =null;
		 
           System.out.println("DEBUG [param]: Parameter: " + ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).value); 
        
              CUP$parser$result = parser.getSymbolFactory().newSymbol("param",8, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // param ::= type_specifier ID LSQUARE RSQUARE 
            {
              Object RESULT =null;
		 
           System.out.println("DEBUG [param]: Array parameter: " + ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).value); 
        
              CUP$parser$result = parser.getSymbolFactory().newSymbol("param",8, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // compound_stmt ::= LCURLY local_declarations statement_list RCURLY 
            {
              Object RESULT =null;
		 System.out.println("DEBUG [compound_stmt]: Entered compound statement"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("compound_stmt",9, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // local_declarations ::= local_declarations var_declaration 
            {
              Object RESULT =null;
		 System.out.println("DEBUG [local_declarations]: Local variable declaration"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("local_declarations",10, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // local_declarations ::= 
            {
              Object RESULT =null;
		 System.out.println("DEBUG [local_declarations]: No local declarations"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("local_declarations",10, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // statement_list ::= statement_list statement 
            {
              Object RESULT =null;
		 System.out.println("DEBUG[statement_list]: Added statement"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("statement_list",11, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // statement_list ::= 
            {
              Object RESULT =null;
		 System.out.println("DEBUG[statement_list]: No statements in list"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("statement_list",11, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // statement ::= expression_stmt 
            {
              Object RESULT =null;
		 System.out.println("DEBUG[statement]: Parsed expression statement"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("statement",12, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // statement ::= compound_stmt 
            {
              Object RESULT =null;
		 System.out.println("DEBUG[statement]: Parsed compound statement"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("statement",12, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // statement ::= selection_stmt 
            {
              Object RESULT =null;
		 System.out.println("DEBUG[statement]: Parsed selection statement"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("statement",12, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // statement ::= iteration_stmt 
            {
              Object RESULT =null;
		 System.out.println("DEBUG[statement]: Parsed iteration statement"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("statement",12, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // statement ::= return_stmt 
            {
              Object RESULT =null;
		 System.out.println("DEBUG[statement]: Parsed return statement"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("statement",12, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // expression_stmt ::= expression SCOLON 
            {
              Object RESULT =null;
		 System.out.println("DEBUG[expression_stmt]: Parsed an expression statement"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expression_stmt",13, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // expression_stmt ::= SCOLON 
            {
              Object RESULT =null;
		 System.out.println("DEBUG[expression_stmt]: Empty expression statement"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expression_stmt",13, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // selection_stmt ::= IF LPAREN expression RPAREN statement 
            {
              Object RESULT =null;
		 System.out.println("DEBUG: Parsed IF statement"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("selection_stmt",14, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // selection_stmt ::= IF LPAREN expression RPAREN statement ELSE statement 
            {
              Object RESULT =null;
		 System.out.println("DEBUG: Parsed IF-ELSE statement"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("selection_stmt",14, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // iteration_stmt ::= WHILE LPAREN expression RPAREN statement 
            {
              Object RESULT =null;
		 System.out.println("DEBUG [iteration_stmt]: Parsed WHILE loop"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("iteration_stmt",15, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // return_stmt ::= RETURN SCOLON 
            {
              Object RESULT =null;
		 System.out.println("DEBUG [return_stmt]: Parsed RETURN statement without expression"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("return_stmt",16, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // return_stmt ::= RETURN expression SCOLON 
            {
              Object RESULT =null;
		 System.out.println("DEBUG [return_stmt]: Parsed RETURN statement with expression: " + 
                ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).value); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("return_stmt",16, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // expression ::= var ASSIGN expression 
            {
              Object RESULT =null;
		 System.out.println("DEBUG [expressions]: Assignment statement"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expression",17, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // expression ::= simple_expression 
            {
              Object RESULT =null;
		 System.out.println("DEBUG [expression]: Simple expression"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expression",17, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // var ::= ID 
            {
              Object RESULT =null;
		 System.out.println("DEBUG [var]: Variable "); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("var",18, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // var ::= ID LSQUARE expression RSQUARE 
            {
              Object RESULT =null;
		 System.out.println("DEBUG [var]: Array access " ); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("var",18, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // simple_expression ::= additive_expression relop additive_expression 
            {
              Object RESULT =null;
		 System.out.println("DEBUG [simple_expression]: Relational expression"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("simple_expression",19, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // simple_expression ::= additive_expression 
            {
              Object RESULT =null;
		 System.out.println("DEBUG [simple_expression]: Additive expression"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("simple_expression",19, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // relop ::= LT 
            {
              Object RESULT =null;
		 System.out.println("DEBUG [relop]: Parsed < operator"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("relop",20, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // relop ::= LTE 
            {
              Object RESULT =null;
		 System.out.println("DEBUG [relop]: Parsed <= operator"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("relop",20, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // relop ::= GT 
            {
              Object RESULT =null;
		 System.out.println("DEBUG [relop]: Parsed > operator"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("relop",20, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // relop ::= GTE 
            {
              Object RESULT =null;
		 System.out.println("DEBUG [relop]: Parsed >= operator"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("relop",20, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // relop ::= EQ 
            {
              Object RESULT =null;
		 System.out.println("DEBUG [relop]: Parsed == operator"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("relop",20, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // relop ::= NEQ 
            {
              Object RESULT =null;
		 System.out.println("DEBUG [relop]: Parsed != operator"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("relop",20, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // additive_expression ::= additive_expression addop term 
            {
              Object RESULT =null;
		 System.out.println("DEBUG [additive_expression]: Additive expression"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("additive_expression",21, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // additive_expression ::= term 
            {
              Object RESULT =null;
		 System.out.println("DEBUG [additive_expression]: Term expression"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("additive_expression",21, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // addop ::= PLUS 
            {
              Object RESULT =null;
		 System.out.println("DEBUG [addop]: Parsed PLUS operator"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("addop",22, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // addop ::= MINUS 
            {
              Object RESULT =null;
		 System.out.println("DEBUG [addop]: Parsed MINUS operator"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("addop",22, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // term ::= term mulop signed_factor 
            {
              Object RESULT =null;
		 System.out.println("DEBUG [term]: Parsed term"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("term",23, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // term ::= signed_factor 
            {
              Object RESULT =null;
		 System.out.println("DEBUG [term]: Parsed signed factor"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("term",23, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // mulop ::= TIMES 
            {
              Object RESULT =null;
		 System.out.println("DEBUG [mulop]: Parsed TIMES operator"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("mulop",24, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // mulop ::= DIVIDE 
            {
              Object RESULT =null;
		 System.out.println("DEBUG [mulop]: Parsed DIVIDE operator"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("mulop",24, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // signed_factor ::= MINUS signed_factor 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("signed_factor",25, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // signed_factor ::= factor 
            {
              Object RESULT =null;
		 System.out.println("DEBUG [signed_factor]: Parsed factor"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("signed_factor",25, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // factor ::= LPAREN expression RPAREN 
            {
              Object RESULT =null;
		 System.out.println("DEBUG [factor]: Parenthesized expression"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("factor",26, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // factor ::= var 
            {
              Object RESULT =null;
		 System.out.println("DEBUG [factor]: Variable factor"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("factor",26, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // factor ::= call 
            {
              Object RESULT =null;
		 System.out.println("DEBUG [factor]: Function call factor"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("factor",26, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // factor ::= NUM 
            {
              Object RESULT =null;
		 System.out.println("DEBUG [factor]: Numeric constant "); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("factor",26, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // factor ::= TRUTH 
            {
              Object RESULT =null;
		 System.out.println("DEBUG [factor]: Boolean constant "); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("factor",26, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // call ::= ID LPAREN args RPAREN 
            {
              Object RESULT =null;
		 System.out.println("DEBUG [call]: Function call: "); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("call",27, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // args ::= arg_list 
            {
              Object RESULT =null;
		 System.out.println("DEBUG [args]: Arguments present"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("args",28, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // args ::= 
            {
              Object RESULT =null;
		 System.out.println("DEBUG [args]: No arguments"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("args",28, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // arg_list ::= arg_list COMMA expression 
            {
              Object RESULT =null;
		 System.out.println("DEBUG [arg_list]: Multiple function arguments"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("arg_list",29, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // arg_list ::= expression 
            {
              Object RESULT =null;
		 System.out.println("DEBUG [arg_list]: Single function argument"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("arg_list",29, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number "+CUP$parser$act_num+"found in internal parse table");

        }
    } /* end of method */

  /** Method splitting the generated action code into several parts. */
  public final java_cup.runtime.Symbol CUP$parser$do_action(
    int                        CUP$parser$act_num,
    java_cup.runtime.lr_parser CUP$parser$parser,
    java.util.Stack            CUP$parser$stack,
    int                        CUP$parser$top)
    throws java.lang.Exception
    {
              return CUP$parser$do_action_part00000000(
                               CUP$parser$act_num,
                               CUP$parser$parser,
                               CUP$parser$stack,
                               CUP$parser$top);
    }
}

}
