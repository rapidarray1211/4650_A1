/* C- Parser Specification */

import java_cup.runtime.*;

parser code {:
    
    /* Change the method report_error so it will display the line and
       column of where the error occurred in the input as well as the
       reason for the error which is passed into the method in the
       String 'message'. */
    public void report_error(String message, Object info) {
   
        /* Create a StringBuffer called 'm' with the string 'Error' in it. */
        StringBuffer m = new StringBuffer("Error");
   
        /* Check if the information passed to the method is the same
           type as the type java_cup.runtime.Symbol. */
        if (info instanceof java_cup.runtime.Symbol) {
            /* Declare a java_cup.runtime.Symbol object 's' with the
               information in the object info that is being typecasted
               as a java_cup.runtime.Symbol object. */
            java_cup.runtime.Symbol s = ((java_cup.runtime.Symbol) info);
   
            /* Check if the line number in the input is greater or
               equal to zero. */
            if (s.left >= 0) {                
                /* Add to the end of the StringBuffer error message
                   the line number of the error in the input. */
                m.append(" in line "+(s.left+1));   
                /* Check if the column number in the input is greater
                   or equal to zero. */
                if (s.right >= 0)                    
                    /* Add to the end of the StringBuffer error message
                       the column number of the error in the input. */
                    m.append(", column "+(s.right+1));
            }
        }
   
        /* Add to the end of the StringBuffer error message created in
           this method the message that was passed into this method. */
        m.append(" : "+message);
   
        /* Print the contents of the StringBuffer 'm', which contains
           an error message, out on a line. */
        System.err.println(m);
    }
   
    /* Change the method report_fatal_error so when it reports a fatal
       error it will display the line and column number of where the
       fatal error occurred in the input as well as the reason for the
       fatal error which is passed into the method in the object
       'message' and then exit.*/
    public void report_fatal_error(String message, Object info) {
        report_error(message, info);
        System.exit(1);
    }

    /* Assume true at the start, but set to false with parsing errors */
    public static boolean valid = true;

:};

// Define the grammar for C-

/* Precedence and associativity rules */

/* Define terminal tokens */
terminal BOOL, IF, ELSE, INT, RETURN, VOID, WHILE, LOWER_THAN_ELSE;
terminal PLUS, MINUS, TIMES, DIVIDE, LT, GT, LTE, GTE, EQ, NEQ, TILDE, OR, AND, ASSIGN, SCOLON, COMMA;
terminal LPAREN, RPAREN, LSQUARE, RSQUARE, LCURLY, RCURLY, UMINUS;
terminal TRUTH, ID, NUM;
terminal ERR;

/* Define nonterminal tokens */
non terminal program, declaration_list, declaration, var_declaration, fun_declaration, type_specifier;
non terminal params, param_list, param, compound_stmt, local_declarations, statement_list, statement;
non terminal expression_stmt, selection_stmt, iteration_stmt, return_stmt, expression, var, simple_expression;
non terminal relop, additive_expression, addop, term, mulop, signed_factor, factor, call, args, arg_list;

/* Precedences */
precedence left OR;
precedence left AND;
precedence left EQ, NEQ;
precedence left LT, LTE, GT, GTE;
precedence left PLUS, MINUS;
precedence left TIMES, DIVIDE;
precedence right UMINUS;
precedence nonassoc LOWER_THAN_ELSE;
precedence nonassoc ELSE;

/* Start symbol */
start with program;


/* Grammar rules */
program            ::= declaration_list {: System.out.println("DEBUG ENTERED PROGRAM"); :};
declaration_list ::= declaration_list declaration {: System.out.println("DEBUG: Adding declaration"); :}
                   | declaration {: System.out.println("DEBUG: Single declaration processed"); :};
declaration       ::= var_declaration | fun_declaration;
var_declaration   ::= type_specifier ID SCOLON | type_specifier ID LSQUARE NUM RSQUARE SCOLON;
fun_declaration ::= type_specifier ID LPAREN params RPAREN compound_stmt {: System.out.println("DEBUG: Function declared: "); :};
type_specifier    ::= BOOL | INT | VOID;
params            ::= param_list | VOID;
param_list        ::= param_list COMMA param | param;
param            ::= type_specifier ID | type_specifier ID LSQUARE RSQUARE;
compound_stmt ::= LCURLY local_declarations statement_list RCURLY {: System.out.println("DEBUG: Entered compound statement"); :};
local_declarations ::= local_declarations var_declaration |;
statement_list    ::= statement_list statement |;
statement        ::= expression_stmt | compound_stmt | selection_stmt | iteration_stmt | return_stmt;
expression_stmt ::= expression SCOLON {: System.out.println("DEBUG: Parsed an expression statement"); :} | SCOLON;
selection_stmt   ::= IF LPAREN expression RPAREN statement | IF LPAREN expression RPAREN statement ELSE statement;
iteration_stmt   ::= WHILE LPAREN expression RPAREN statement;
return_stmt      ::= RETURN SCOLON | RETURN expression SCOLON;
expression       ::= var ASSIGN expression | simple_expression;
var             ::= ID | ID LSQUARE expression RSQUARE;
simple_expression ::= additive_expression relop additive_expression | additive_expression;
relop           ::= LT | LTE | GT | GTE | EQ | NEQ;
additive_expression ::= additive_expression addop term | term;
addop           ::= PLUS | MINUS;
term ::= term mulop signed_factor {: System.out.println("DEBUG: Parsed term"); :} | signed_factor;
mulop           ::= TIMES | DIVIDE;
signed_factor   ::= MINUS signed_factor %prec UMINUS | factor;
factor          ::= LPAREN expression RPAREN | var | call | NUM | TRUTH;
call            ::= ID LPAREN args RPAREN;
args            ::= arg_list |;
arg_list ::= arg_list COMMA expression {: System.out.println("DEBUG: Parsed function arguments"); :} | expression;
