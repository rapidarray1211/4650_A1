/* C- Parser Specification */

import java_cup.runtime.*;
import absyn.*;
parser code {:
    
    /* Change the method report_error so it will display the line and
       column of where the error occurred in the input as well as the
       reason for the error which is passed into the method in the
       String 'message'. */
    public void report_error(String message, Object info) {
   
        /* Create a StringBuffer called 'm' with the string 'Error' in it. */
        StringBuffer m = new StringBuffer("Error");
   
        /* Check if the information passed to the method is the same
           type as the type java_cup.runtime.Symbol. */
        if (info instanceof java_cup.runtime.Symbol) {
            /* Declare a java_cup.runtime.Symbol object 's' with the
               information in the object info that is being typecasted
               as a java_cup.runtime.Symbol object. */
            java_cup.runtime.Symbol s = ((java_cup.runtime.Symbol) info);
   
            /* Check if the line number in the input is greater or
               equal to zero. */
            if (s.left >= 0) {                
                /* Add to the end of the StringBuffer error message
                   the line number of the error in the input. */
                m.append(" in line "+(s.left+1));   
                /* Check if the column number in the input is greater
                   or equal to zero. */
                if (s.right >= 0)                    
                    /* Add to the end of the StringBuffer error message
                       the column number of the error in the input. */
                    m.append(", column "+(s.right+1));
            }
        }
   
        /* Add to the end of the StringBuffer error message created in
           this method the message that was passed into this method. */
        m.append(" : "+message);
   
        /* Print the contents of the StringBuffer 'm', which contains
           an error message, out on a line. */
        System.err.println(m);
    }
   
    /* Change the method report_fatal_error so when it reports a fatal
       error it will display the line and column number of where the
       fatal error occurred in the input as well as the reason for the
       fatal error which is passed into the method in the object
       'message' and then exit.*/
    public void report_fatal_error(String message, Object info) {
        report_error(message, info);
        System.exit(1);
    }

    /* Assume true at the start, but set to false with parsing errors */
    public static boolean valid = true;

:};

// Define the grammar for C-

/* Precedence and associativity rules */

/* Define terminal tokens */
terminal BOOL, IF, ELSE, INT, RETURN, VOID, WHILE, LOWER_THAN_ELSE;
terminal PLUS, MINUS, TIMES, DIVIDE, LT, GT, LTE, GTE, EQ, NEQ, TILDE, OR, AND, ASSIGN, SCOLON, COMMA;
terminal LPAREN, RPAREN, LSQUARE, RSQUARE, LCURLY, RCURLY, UMINUS;
terminal TRUTH, ID, NUM;
terminal ERR;

/* Define nonterminal tokens */
non terminal program, declaration_list, declaration, var_declaration, fun_declaration, type_specifier, fun_prototype;
non terminal params, param_list, param, compound_stmt, local_declarations, statement_list, statement;
non terminal expression_stmt, selection_stmt, iteration_stmt, return_stmt, expression, var, simple_expression;
non terminal relop, additive_expression, addop, term, mulop, signed_factor, factor, call, args, arg_list;

/* Precedences */
precedence left OR;
precedence left AND;
precedence left EQ, NEQ;
precedence left LT, LTE, GT, GTE;
precedence left PLUS, MINUS;
precedence left TIMES, DIVIDE;
precedence right UMINUS;
precedence nonassoc LOWER_THAN_ELSE;
precedence nonassoc ELSE;

/* Start symbol */
start with program;


/* Grammar rules */

program ::= declaration_list: d
          {:
            RESULT = d;
            System.out.println("DEBUG [program]: Entered PROGRAM"); 
          :};

declaration_list ::= declaration_list: d1 declaration: d
                   {: 
                     DecList dl = d1;
                     while ( dl.tail != null )
                        dl = dl.tail;
                     dl.tail = new DecList(d, null);
                     RESULT = d1;
                      System.out.println("DEBUG [declaration_list]: Adding declaration: " + 
                        ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).value); 
                   :} 
                   | declaration: d
                   {: 
                      RESULT = new DecList(d, null);
                      System.out.println("DEBUG [declaration_list]: Single declaration processed: " + 
                        ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).value); 
                   :};

declaration ::= var_declaration: vd
              {: 
                  RESULT = vd;
                  System.out.println("DEBUG [declaration]: Parsed var_declaration: " + 
                   ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).value); 
              :} 
              | fun_declaration: fd
              {: 
                  RESULT = fd;
                  System.out.println("DEBUG [declaration]: Parsed fun_declaration: " + 
                   ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).value); 
              :}
              | fun_prototype: fun_prototype
              {:
                  RESULT = fp;
                  System.out.println("DEBUG [declaration]: Parsed fun_prototype: " + 
                   ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).value); 
              :};

var_declaration ::= type_specifier:t ID:i SCOLON 
                  {: 
                     RESULT = new VarDec(t,i,null);
                     System.out.println("DEBUG [var_declaration]: Variable declaration: " + 
                       ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).value); 
                  :} 
                  | type_specifier:t ID:i LSQUARE NUM:n RSQUARE SCOLON 
                  {: 
                     RESULT = new ArrayDec(t,i,n);
                     System.out.println("DEBUG [var_declaration]: Array declaration: " + 
                     ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).value + 
                     "[" + ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).value + "]"); 
                  :};
fun_declaration ::= type_specifier:t ID:i LPAREN params:p RPAREN compound_stmt:cs 
                  {: 
                     RESULT = new FunDec(t,i,p,cs);
                     System.out.println("DEBUG [fun_declaration]: Function declared: " + 
                       ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).value); 
                  :};

fun_prototype ::= type_specifier:t ID:i LPAREN params:p RPAREN SCOLON
                  {:
                     RESULT = new FunDec(t,i,p,null);
                     System.out.println("DEBUG [fun_prototype]: Function prototype: ");
                  :};

type_specifier ::= BOOL
                 {: 
                     RESULT = new Type(1);
                     System.out.println("DEBUG [type_specifier]: Type BOOL"); :} 
                 | INT 
                 {:  RESULT = new Type(2);
                     System.out.println("DEBUG [type_specifier]: Type INT"); :} 
                 | VOID 
                 {:  RESULT = new Type(0);
                     System.out.println("DEBUG [type_specifier]: Type VOID"); :};

// Implement Param list as a linked list
params ::= param_list:pl 
         {: RESULT = new Params(pl);
            System.out.println("DEBUG [params]: Parsed parameters: " + 
           ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).value); :} 
         | VOID 
         {: RESULT = new Params(null);
            System.out.println("DEBUG [params]: Void parameter list"); :};

param_list ::= param_list:pl COMMA param:p
             {: /* Add to p to tail of pl*/
               ParamList t = pl;
               while( t.tail != null )
                  t = t.tail;
               t.tail = new ParamList(p,null);
               RESULT = pl;
               System.out.println("DEBUG [param_list]: Multiple parameters: " + 
               ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).value); :} 
             | param:p 
             {: RESULT = new ParamList(p,null); /*Create new ParamList with p as head*/
               System.out.println("DEBUG [param_list]: Single parameter: " + 
               ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).value); :};

//The third values in Param() indicates if it is array or not
param ::= type_specifier:t ID:i
        {: RESULT = new Param(t,i,false);
           System.out.println("DEBUG [param]: Parameter: " + ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).value); 
        :} 
        | type_specifier:t ID:i LSQUARE RSQUARE 
        {: RESULT = new Param(t,i,true);
           System.out.println("DEBUG [param]: Array parameter: " + ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).value); 
        :};

compound_stmt ::= LCURLY local_declarations:ld statement_list:sl RCURLY 
                {:RESULT = new CmpdStat(ld,sl);
                  System.out.println("DEBUG [compound_stmt]: Entered compound statement"); :};

/*LocDecl is also a list*/
local_declarations ::= local_declarations:ld var_declaration:vd
                     {: /*Add vd to tail of ld*/
                        LocDecls t = ld;
                        while( t.tail != null )
                           t = t.tail;
                           t.tail = new LocDecls(vd,null);
                        RESULT = ld; 
                        System.out.println("DEBUG [local_declarations]: Local variable declaration"); :} 
                     | {: RESULT = new LocDecls(null,null); /*Empty list*/
                        System.out.println("DEBUG [local_declarations]: No local declarations"); :};

statement_list ::= statement_list:sl statement:s
                 {: /*Add vstatement to tail of sl*/
                     LocDecls t = sl;
                     while( t.tail != null )
                        t = t.tail;
                        t.tail = new StatList(s,null);
                     RESULT = sl; 
                     System.out.println("DEBUG[statement_list]: Added statement"); :} 
                 |{: RESULT = new StatList(null,null); /*Empty list*/
                     System.out.println("DEBUG[statement_list]: No statements in list"); :};

statement ::= expression_stmt:es 
            {: RESULT = es;
               System.out.println("DEBUG[statement]: Parsed expression statement"); :} 
            | compound_stmt:cs
            {: RESULT = cs;
               System.out.println("DEBUG[statement]: Parsed compound statement"); :} 
            | selection_stmt:ss 
            {: RESULT = ss;
               System.out.println("DEBUG[statement]: Parsed selection statement"); :} 
            | iteration_stmt:is 
            {: RESULT = is;
               System.out.println("DEBUG[statement]: Parsed iteration statement"); :} 
            | return_stmt:rs
            {: RESULT = rs;
               System.out.println("DEBUG[statement]: Parsed return statement"); :};

expression_stmt ::= expression:e SCOLON 
                  {: RESULT = e;
                     System.out.println("DEBUG[expression_stmt]: Parsed an expression statement"); :} 
                  | SCOLON 
                  {: RESULT = null;
                  System.out.println("DEBUG[expression_stmt]: Empty expression statement"); :};

selection_stmt ::= IF LPAREN expression:e RPAREN statement:s 
                 {: RESULT = new SelStmt(e,s,null);
                  System.out.println("DEBUG: Parsed IF statement"); :} 
                 | IF LPAREN expression:e RPAREN statement:s1 ELSE statement:s2
                 {: RESULT = new SelStmt(e,s1,s2);
                  System.out.println("DEBUG: Parsed IF-ELSE statement"); :};

iteration_stmt ::= WHILE LPAREN expression:e RPAREN statement:s 
                 {: RESULT = new IterStmt(e,s);
                  System.out.println("DEBUG [iteration_stmt]: Parsed WHILE loop"); :};

return_stmt ::= RETURN SCOLON 
              {: RESULT = new RetStmt(null);
               System.out.println("DEBUG [return_stmt]: Parsed RETURN statement without expression"); :} 
              | RETURN expression:e SCOLON 
              {: RESULT = new RetStmt(e);
               System.out.println("DEBUG [return_stmt]: Parsed RETURN statement with expression: " + 
                ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).value); :};

expression ::= var:v ASSIGN expression:e
             {: System.out.println("DEBUG [expressions]: Assignment statement"); :} 
             | simple_expression:se 
             {: System.out.println("DEBUG [expression]: Simple expression"); :};

var ::= ID 
      {: System.out.println("DEBUG [var]: Variable "); :} 
      | ID LSQUARE expression RSQUARE 
      {: System.out.println("DEBUG [var]: Array access " ); :};

simple_expression ::= additive_expression relop additive_expression 
                     {: System.out.println("DEBUG [simple_expression]: Relational expression"); :} 
                     | additive_expression 
                     {: System.out.println("DEBUG [simple_expression]: Additive expression"); :};

relop ::= LT 
        {: System.out.println("DEBUG [relop]: Parsed < operator"); :} 
        | LTE 
        {: System.out.println("DEBUG [relop]: Parsed <= operator"); :} 
        | GT 
        {: System.out.println("DEBUG [relop]: Parsed > operator"); :} 
        | GTE 
        {: System.out.println("DEBUG [relop]: Parsed >= operator"); :} 
        | EQ 
        {: System.out.println("DEBUG [relop]: Parsed == operator"); :} 
        | NEQ 
        {: System.out.println("DEBUG [relop]: Parsed != operator"); :};

additive_expression ::= additive_expression addop term 
                       {: System.out.println("DEBUG [additive_expression]: Additive expression"); :} 
                       | term 
                       {: System.out.println("DEBUG [additive_expression]: Term expression"); :};


addop ::= PLUS 
        {: System.out.println("DEBUG [addop]: Parsed PLUS operator"); :} 
        | MINUS 
        {: System.out.println("DEBUG [addop]: Parsed MINUS operator"); :};

term ::= term mulop signed_factor 
       {: System.out.println("DEBUG [term]: Parsed term"); :} 
       | signed_factor 
       {: System.out.println("DEBUG [term]: Parsed signed factor"); :};

mulop ::= TIMES 
        {: System.out.println("DEBUG [mulop]: Parsed TIMES operator"); :} 
        | DIVIDE 
        {: System.out.println("DEBUG [mulop]: Parsed DIVIDE operator"); :};

signed_factor ::= MINUS signed_factor %prec UMINUS 
                | factor 
                {: System.out.println("DEBUG [signed_factor]: Parsed factor"); :};

factor ::= LPAREN expression RPAREN 
         {: System.out.println("DEBUG [factor]: Parenthesized expression"); :} 
         | var 
         {: System.out.println("DEBUG [factor]: Variable factor"); :} 
         | call 
         {: System.out.println("DEBUG [factor]: Function call factor"); :} 
         | NUM 
         {: System.out.println("DEBUG [factor]: Numeric constant "); :} 
         | TRUTH 
         {: System.out.println("DEBUG [factor]: Boolean constant "); :};

call ::= ID LPAREN args RPAREN 
       {: System.out.println("DEBUG [call]: Function call: "); :};

args ::= arg_list 
       {: System.out.println("DEBUG [args]: Arguments present"); :} 
       | {: System.out.println("DEBUG [args]: No arguments"); :};

arg_list ::= arg_list COMMA expression 
           {: System.out.println("DEBUG [arg_list]: Multiple function arguments"); :} 
           | expression 
           {: System.out.println("DEBUG [arg_list]: Single function argument"); :};